// Mocks generated by Mockito 5.4.6 from annotations
// in customizable_chart/test/viewmodel/settings_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i2;

import 'package:customizable_chart/l10n/global_app_localizations.dart' as _i6;
import 'package:customizable_chart/model/services/environment.dart' as _i5;
import 'package:customizable_chart/utils/secure_storage/secure_storage.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocale_0 extends _i1.SmartFake implements _i2.Locale {
  _FakeLocale_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStorage extends _i1.Mock implements _i3.SecureStorage {
  MockSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> write({required String? key, required String? value}) =>
      (super.noSuchMethod(
            Invocation.method(#write, [], {#key: key, #value: value}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<String?> read({required String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#read, [], {#key: key}),
            returnValue: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<void> delete({required String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {#key: key}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> containsKey(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [key]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> eraseAll() =>
      (super.noSuchMethod(
            Invocation.method(#eraseAll, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [EnvironmentService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEnvironmentService extends _i1.Mock
    implements _i5.EnvironmentService {
  MockEnvironmentService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String?> getAuthToken() =>
      (super.noSuchMethod(
            Invocation.method(#getAuthToken, []),
            returnValue: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<Map<String, dynamic>> getTokenUsageInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getTokenUsageInfo, []),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);
}

/// A class which mocks [GlobalAppLocalizations].
///
/// See the documentation for Mockito's code generation for more information.
class MockGlobalAppLocalizations extends _i1.Mock
    implements _i6.GlobalAppLocalizations {
  MockGlobalAppLocalizations() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Locale get locale =>
      (super.noSuchMethod(
            Invocation.getter(#locale),
            returnValue: _FakeLocale_0(this, Invocation.getter(#locale)),
          )
          as _i2.Locale);

  @override
  void setAppLocalizations(dynamic localizations) => super.noSuchMethod(
    Invocation.method(#setAppLocalizations, [localizations]),
    returnValueForMissingStub: null,
  );
}
